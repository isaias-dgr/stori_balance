// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetFile provides a mock function with given fields: address
func (_m *Storage) GetFile(address string) (io.ReadCloser, error) {
	ret := _m.Called(address)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListFiles provides a mock function with given fields: address
func (_m *Storage) GetListFiles(address string) ([]string, error) {
	ret := _m.Called(address)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFile provides a mock function with given fields: address, doc
func (_m *Storage) PutFile(address string, doc *bytes.Buffer) (string, error) {
	ret := _m.Called(address, doc)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *bytes.Buffer) (string, error)); ok {
		return rf(address, doc)
	}
	if rf, ok := ret.Get(0).(func(string, *bytes.Buffer) string); ok {
		r0 = rf(address, doc)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *bytes.Buffer) error); ok {
		r1 = rf(address, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
